I"Hm<ul>
  <li>模块加载器设计思维导图</li>
  <li>seajs源码分析</li>
</ul>

<h2 id="模块加载器设计">模块加载器设计</h2>

<p>模块加载器核心部分</p>

<ul>
  <li><code class="highlighter-rouge">模块部分</code>：<code class="highlighter-rouge">数据初始化</code>、<code class="highlighter-rouge">模块存储</code>。每个模块创建都先初始化数据，存储在缓存对象中</li>
  <li><code class="highlighter-rouge">资源部分</code>：<code class="highlighter-rouge">依赖管理</code>、<code class="highlighter-rouge">资源定义</code>、<code class="highlighter-rouge">动态加载script文件</code>。资源定位依赖管理是加载器设计两大核心</li>
</ul>

<h3 id="1-数据初始化">1 数据初始化</h3>

<ul>
  <li>加载器中设计了一个名为Module构造函数，每个模块都是此构造函数实例对象。</li>
  <li>构造函数中给实例对象扩展了， ‘未来’所需要的用到的属性以及方法，</li>
  <li>url：当前模块的绝对路径地址</li>
  <li>deps：模块的依赖列表。</li>
  <li>…</li>
</ul>

<div class="language-coq highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="o">(</span><span class="no">function</span><span class="o">(</span><span class="no">global</span><span class="o">){</span><span class="w">
    </span><span class="no">var</span><span class="w"> </span><span class="no">seajs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nn">global</span><span class="p">.</span><span class="no">seajs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">{</span><span class="w">
      </span><span class="no">version</span><span class="p">:</span><span class="w"> </span><span class="k">'</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="k">'</span><span class="w">
    </span><span class="o">}</span><span class="p">;</span><span class="w">
    </span><span class="no">var</span><span class="w"> </span><span class="no">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">{}</span><span class="p">;</span><span class="w">
    </span><span class="no">var</span><span class="w"> </span><span class="no">cache</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">{}</span><span class="p">;</span><span class="w"> </span><span class="o">//</span><span class="w"> </span><span class="err">缓存对象，模块的信息</span><span class="w">
    </span><span class="no">var</span><span class="w"> </span><span class="no">anonymousMeta</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">{}</span><span class="p">;</span><span class="w">
    </span><span class="no">var</span><span class="w"> </span><span class="no">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">{</span><span class="w">
      </span><span class="no">FETCHEN</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="o">,</span><span class="w">
      </span><span class="no">SAVED</span><span class="p">:</span><span class="mi">2</span><span class="o">,</span><span class="w">
      </span><span class="no">LOADING</span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="o">,</span><span class="w">
      </span><span class="no">LOADED</span><span class="p">:</span><span class="w"> </span><span class="mi">4</span><span class="o">,</span><span class="w">
      </span><span class="no">EXECUTING</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="o">,</span><span class="w">
      </span><span class="no">EXECUTED</span><span class="p">:</span><span class="w"> </span><span class="mi">6</span><span class="w">
    </span><span class="o">}</span><span class="w">
    </span><span class="o">//</span><span class="w"> </span><span class="err">构造函数</span><span class="w"> </span><span class="err">模块</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="err">实例化</span><span class="w">
    </span><span class="no">function</span><span class="w"> </span><span class="k">Module</span><span class="o">(</span><span class="no">uri</span><span class="o">,</span><span class="w"> </span><span class="no">deps</span><span class="o">){</span><span class="w">
      </span><span class="nn">this</span><span class="p">.</span><span class="no">uri</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">uri</span><span class="p">;</span><span class="w"> </span><span class="o">//</span><span class="w"> </span><span class="err">当前模块的绝对路径地址</span><span class="w">
      </span><span class="nn">this</span><span class="p">.</span><span class="no">deps</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">deps</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="o">[]</span><span class="p">;</span><span class="w"> </span><span class="o">//</span><span class="w"> </span><span class="err">模块的依赖列表</span><span class="w">
      </span><span class="nn">this</span><span class="p">.</span><span class="no">exports</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">null</span><span class="p">;</span><span class="w"> </span><span class="o">//</span><span class="w"> </span><span class="err">导出的接口对象</span><span class="w">
      </span><span class="nn">this</span><span class="p">.</span><span class="no">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="o">//</span><span class="w"> </span><span class="err">生命周期</span><span class="w"> </span><span class="err">状态码</span><span class="w"> </span><span class="mi">1</span><span class="o">(</span><span class="err">初始化</span><span class="o">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="mi">6</span><span class="err">（加载完毕）</span><span class="w"> </span><span class="o">(</span><span class="err">避免重复加载</span><span class="o">)</span><span class="w">
      </span><span class="nn">this</span><span class="p">.</span><span class="no">_waitings</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">{}</span><span class="p">;</span><span class="w"> </span><span class="o">//</span><span class="w"> </span><span class="err">检测机制，谁会依赖于我，我会依赖谁</span><span class="w"> </span><span class="err">（循环依赖问题）</span><span class="w">
      </span><span class="nn">this</span><span class="p">.</span><span class="no">_remain</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="o">//</span><span class="w"> </span><span class="err">依赖模块的个数</span><span class="w">
    </span><span class="o">}</span><span class="w">
</span><span class="o">})(</span><span class="no">this</span><span class="o">)</span><span class="p">;</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="2-模块存储">2 模块存储</h3>

<p>加载器中设计了一个名为cache缓存对象，每个文件（模块）都会存储在cache对象中
具体存储方式：｛”当前模块绝对路径”: new Module()｝
注意：当前模块的绝对路径是通过资源部分，资源定位方式实现的</p>

<div class="language-coq highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="o">(</span><span class="no">function</span><span class="o">(</span><span class="no">global</span><span class="o">){</span><span class="w">
    </span><span class="no">var</span><span class="w"> </span><span class="no">seajs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nn">global</span><span class="p">.</span><span class="no">seajs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">{</span><span class="w">
      </span><span class="no">version</span><span class="p">:</span><span class="w"> </span><span class="k">'</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="k">'</span><span class="w">
    </span><span class="o">}</span><span class="p">;</span><span class="w">
    </span><span class="no">var</span><span class="w"> </span><span class="no">cache</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">{}</span><span class="p">;</span><span class="w"> </span><span class="o">//</span><span class="w"> </span><span class="err">缓存对象，模块的信息</span><span class="w">

    </span><span class="nn">Module</span><span class="p">.</span><span class="nn">prototype</span><span class="p">.</span><span class="no">save</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">function</span><span class="o">(</span><span class="no">uri</span><span class="o">,</span><span class="w"> </span><span class="no">meta</span><span class="o">){</span><span class="w">
      </span><span class="no">var</span><span class="w"> </span><span class="no">mod</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nn">Module</span><span class="p">.</span><span class="no">get</span><span class="o">(</span><span class="no">uri</span><span class="o">)</span><span class="p">;</span><span class="w">
      </span><span class="nn">mod</span><span class="p">.</span><span class="no">uri</span><span class="w"> </span><span class="o">=</span><span class="w">  </span><span class="no">uri</span><span class="p">;</span><span class="w">
      </span><span class="nn">mod</span><span class="p">.</span><span class="no">deps</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nn">meta</span><span class="p">.</span><span class="no">deps</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="o">[]</span><span class="p">;</span><span class="w">
      </span><span class="nn">mod</span><span class="p">.</span><span class="no">factory</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nn">meta</span><span class="p">.</span><span class="no">factory</span><span class="p">;</span><span class="w">
      </span><span class="nn">mod</span><span class="p">.</span><span class="no">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nn">status</span><span class="p">.</span><span class="no">SAVED</span><span class="p">;</span><span class="w">
    </span><span class="o">}</span><span class="w">

    </span><span class="nn">Module</span><span class="p">.</span><span class="no">get</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">function</span><span class="o">(</span><span class="no">uri</span><span class="o">,</span><span class="w"> </span><span class="no">deps</span><span class="o">){</span><span class="w">
      </span><span class="kr">return</span><span class="w"> </span><span class="no">cache</span><span class="o">[</span><span class="no">uri</span><span class="o">]</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="o">(</span><span class="no">cache</span><span class="o">[</span><span class="no">uri</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">new</span><span class="w"> </span><span class="k">Module</span><span class="o">(</span><span class="no">uri</span><span class="o">,</span><span class="w"> </span><span class="no">deps</span><span class="o">))</span><span class="p">;</span><span class="w">
    </span><span class="o">}</span><span class="w">
  
</span><span class="o">})(</span><span class="no">this</span><span class="o">)</span><span class="p">;</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="3-资源定位">3 资源定位</h3>
<p>加载器中设计了一个resolve()的方法把模块名解析成绝对路径格式；
模块化名的获取
seajs.use[‘a.js’, ‘b.js’];
seajs.use()加载器启动方法，启动时会调用传入数组列表中的模块</p>

<div class="language-coq highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="rouge-code"><pre><span class="w">    </span><span class="o">//</span><span class="w"> </span><span class="err">资源定位</span><span class="w"> </span><span class="no">resolve</span><span class="o">(</span><span class="s2">"a"</span><span class="o">)</span><span class="w"> 
    </span><span class="nn">seajs</span><span class="p">.</span><span class="no">resolve</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">function</span><span class="o">(</span><span class="no">child</span><span class="o">,</span><span class="w"> </span><span class="no">parent</span><span class="o">){</span><span class="w">
        </span><span class="kr">if</span><span class="o">(!</span><span class="no">child</span><span class="o">)</span><span class="w"> </span><span class="kr">return</span><span class="w"> </span><span class="s2">""</span><span class="p">;</span><span class="w">
        </span><span class="o">//</span><span class="w"> </span><span class="no">alias</span><span class="p">:</span><span class="o">{</span><span class="s2">"a"</span><span class="p">:</span><span class="w"> </span><span class="s2">"common/js/a"</span><span class="o">}</span><span class="w"> 
        </span><span class="no">child</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">parseAlias</span><span class="o">(</span><span class="no">child</span><span class="o">)</span><span class="p">;</span><span class="w"> </span><span class="o">//</span><span class="w"> </span><span class="err">是否有模块的短名称配置</span><span class="w">
        </span><span class="no">child</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">parsePaths</span><span class="o">(</span><span class="no">child</span><span class="o">)</span><span class="p">;</span><span class="w"> </span><span class="o">//</span><span class="w"> </span><span class="err">是否有路径的短名称配置</span><span class="w">
        </span><span class="no">child</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">normalize</span><span class="o">(</span><span class="no">child</span><span class="o">)</span><span class="p">;</span><span class="w"> </span><span class="o">//</span><span class="w"> </span><span class="err">是否有后缀，处理后缀</span><span class="no">js</span><span class="w">
        </span><span class="kr">return</span><span class="w"> </span><span class="no">addBase</span><span class="o">(</span><span class="no">child</span><span class="o">,</span><span class="w"> </span><span class="no">parent</span><span class="o">)</span><span class="p">;</span><span class="w"> </span><span class="o">//</span><span class="w"> </span><span class="err">生成最终的路径地址</span><span class="w">
    </span><span class="o">}</span><span class="w">

    </span><span class="nn">Module</span><span class="p">.</span><span class="no">use</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">function</span><span class="o">(</span><span class="no">deps</span><span class="o">,</span><span class="w"> </span><span class="no">callback</span><span class="o">,</span><span class="w"> </span><span class="no">uri</span><span class="o">){</span><span class="w">
      </span><span class="no">var</span><span class="w"> </span><span class="no">m</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nn">Module</span><span class="p">.</span><span class="no">get</span><span class="o">(</span><span class="no">uri</span><span class="o">,</span><span class="w"> </span><span class="no">isArray</span><span class="o">(</span><span class="no">deps</span><span class="o">)</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="no">deps</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="o">[</span><span class="no">deps</span><span class="o">])</span><span class="p">;</span><span class="w">
      </span><span class="nn">m</span><span class="p">.</span><span class="no">callback</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">function</span><span class="o">(){</span><span class="w">
        </span><span class="no">var</span><span class="w"> </span><span class="no">exports</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">[]</span><span class="p">;</span><span class="w">
        </span><span class="no">var</span><span class="w"> </span><span class="no">uris</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nn">m</span><span class="p">.</span><span class="no">resolve</span><span class="o">()</span><span class="p">;</span><span class="w">
        </span><span class="no">for</span><span class="o">(</span><span class="no">var</span><span class="w"> </span><span class="no">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="no">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="nn">uris</span><span class="p">.</span><span class="no">length</span><span class="p">;</span><span class="w"> </span><span class="no">i</span><span class="o">++){</span><span class="w">
          </span><span class="no">exports</span><span class="o">[</span><span class="no">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">cache</span><span class="o">[</span><span class="no">uris</span><span class="o">[</span><span class="no">i</span><span class="o">]].</span><span class="no">exec</span><span class="o">()</span><span class="p">;</span><span class="w">
        </span><span class="o">}</span><span class="w">
        </span><span class="kr">if</span><span class="o">(</span><span class="no">callback</span><span class="o">){</span><span class="w">
          </span><span class="nn">callback</span><span class="p">.</span><span class="no">apply</span><span class="o">(</span><span class="no">global</span><span class="o">,</span><span class="w"> </span><span class="no">exports</span><span class="o">)</span><span class="p">;</span><span class="w">
        </span><span class="o">}</span><span class="w">
      </span><span class="o">}</span><span class="w">
      </span><span class="nn">m</span><span class="p">.</span><span class="no">load</span><span class="o">()</span><span class="p">;</span><span class="w">
    </span><span class="o">}</span><span class="w">
    
    </span><span class="nn">seajs</span><span class="p">.</span><span class="no">use</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">function</span><span class="o">(</span><span class="no">list</span><span class="o">,</span><span class="w"> </span><span class="no">callback</span><span class="o">){</span><span class="w">
      </span><span class="nn">Module</span><span class="p">.</span><span class="no">preload</span><span class="o">(</span><span class="no">function</span><span class="o">(){</span><span class="w">
        </span><span class="nn">Module</span><span class="p">.</span><span class="no">use</span><span class="o">(</span><span class="no">list</span><span class="o">,</span><span class="w"> </span><span class="no">callback</span><span class="o">,</span><span class="w"> </span><span class="nn">data</span><span class="p">.</span><span class="no">cwd</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s2">"_use_"</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="no">cid</span><span class="o">())</span><span class="p">;</span><span class="w">
    </span><span class="o">})</span><span class="p">;</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="4-动态加载script文件">4 动态加载script文件</h3>

<ul>
  <li>通过加载器resolve()方法，把模块名解析成绝对路径格式</li>
  <li>动态创建script document.create(‘script’); src 指向当前模块绝对路径地址</li>
  <li>加载文件，模块加载器解析当前模块所依赖模块以数组的形式存储</li>
</ul>

<div class="language-coq highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="o">(</span><span class="no">function</span><span class="o">(</span><span class="no">global</span><span class="o">){</span><span class="w">
    </span><span class="no">var</span><span class="w"> </span><span class="no">seajs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nn">global</span><span class="p">.</span><span class="no">seajs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">{</span><span class="w">
      </span><span class="no">version</span><span class="p">:</span><span class="w"> </span><span class="k">'</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="k">'</span><span class="w">
    </span><span class="o">}</span><span class="p">;</span><span class="w">
    </span><span class="o">//</span><span class="w"> </span><span class="err">异步加载</span><span class="w">
    </span><span class="nn">seajs</span><span class="p">.</span><span class="no">request</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">function</span><span class="o">(</span><span class="no">url</span><span class="o">,</span><span class="w"> </span><span class="no">callback</span><span class="o">){</span><span class="w">
      </span><span class="no">var</span><span class="w"> </span><span class="no">node</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nn">document</span><span class="p">.</span><span class="no">createElement</span><span class="o">(</span><span class="k">'</span><span class="no">script'</span><span class="o">)</span><span class="p">;</span><span class="w">
      </span><span class="nn">node</span><span class="p">.</span><span class="no">src</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">url</span><span class="p">;</span><span class="w">
      </span><span class="nn">document</span><span class="p">.</span><span class="nn">body</span><span class="p">.</span><span class="no">appendChild</span><span class="o">(</span><span class="no">node</span><span class="o">)</span><span class="p">;</span><span class="w">
      </span><span class="nn">node</span><span class="p">.</span><span class="no">onload</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">function</span><span class="o">(){</span><span class="w">
        </span><span class="nn">document</span><span class="p">.</span><span class="nn">body</span><span class="p">.</span><span class="no">removeChild</span><span class="o">(</span><span class="no">node</span><span class="o">)</span><span class="p">;</span><span class="w">
        </span><span class="no">callback</span><span class="o">()</span><span class="p">;</span><span class="w">
      </span><span class="o">}</span><span class="w">
   </span><span class="o">}</span><span class="w">
</span><span class="o">})(</span><span class="no">this</span><span class="o">)</span><span class="p">;</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="5-依赖管理核心">5 依赖管理（核心）</h3>

<p>比如 a.js依赖了b.js  b.js依赖了c.js
解析a依赖，找到b，解析b依赖， 找到c依赖，解析c依赖，c是否还有依赖。（从前到后）
加载c依赖、b依赖、a依赖（从后到前）</p>

<p>已知当前模块的cache中的形式 {“当前模块绝对路径”: new Module()｝
换算：</p>
<ul>
  <li>1 ｛”当前模块绝对路径”:{uri:”当前模块绝对路径”, deps:[]}}</li>
  <li>2 deps存储当前模块的依赖列表，依赖泪奔通过动态加载script文件正则解析获取。</li>
</ul>

<blockquote>
  <p>解析依赖 =&gt; 获取依赖依赖绝对路径地址 =&gt; 动态加载 =&gt; 提取依赖 =&gt; 解析依赖。递归方式加载所有模块，直到模块全都加载完毕。</p>
</blockquote>

<blockquote>
  <blockquote>
    <p><code class="highlighter-rouge">思考</code>：怎么知道a.js依赖了b.js</p>
  </blockquote>
</blockquote>

<p>‘懒加载’的书写方式，用到了谁就加载谁, 异步加载</p>

<div class="language-coq highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="w">  </span><span class="no">define</span><span class="o">(</span><span class="no">function</span><span class="o">(</span><span class="no">require</span><span class="o">,</span><span class="w"> </span><span class="no">exports</span><span class="o">,</span><span class="w"> </span><span class="no">module</span><span class="o">){</span><span class="w">
    </span><span class="o">//</span><span class="w"> </span><span class="err">模块代码</span><span class="w">
    </span><span class="no">var</span><span class="w"> </span><span class="no">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">require</span><span class="o">(</span><span class="k">'</span><span class="nn">b</span><span class="p">.</span><span class="no">js'</span><span class="o">)</span><span class="p">;</span><span class="w">
    </span><span class="o">//</span><span class="w"> </span><span class="err">逻辑代码</span><span class="w">
    </span><span class="o">...</span><span class="w">
  </span><span class="o">})</span><span class="p">;</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>
<p>如何解析呢? 静态化 require(‘b.js’)， 提取参数b.js ＝&gt; deps: [‘b.js’]</p>
:ET