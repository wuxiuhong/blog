I"K<ul>
  <li>怎么理解模块化编程</li>
  <li>模块化规范</li>
  <li>模块加载的运行原理</li>
</ul>

<h2 id="怎么理解模块化编程">怎么理解模块化编程</h2>
<blockquote>
  <p>模块化是一种处理复杂系统分解成为更好的可管理模块的方式，可以把系统代码划分为一系列职责单一，高度解耦且可替换的模块。或者说有组织把一个大文件拆分独立并互相依赖的多个小模块、依赖管理、一个文件对应一个模块</p>
</blockquote>

<p>模块化降低可维护性，负责功能解耦拆分独立相互依赖的小模块，可维护性、命名空间（作用域）、依赖管理（早期用script引入，会有先后顺序）、可复用性。</p>

<div class="language-coq highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">Theorem</span><span class="w"> </span><span class="no">plus_O_n_1</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="kr">forall</span><span class="w"> </span><span class="no">n</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="no">nat</span><span class="o">,</span><span class="w">  </span><span class="no">n</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">n</span><span class="pi">.</span><span class="w">
</span><span class="k">Proof</span><span class="pi">.</span><span class="w">
  </span><span class="kp">intros</span><span class="w"> </span><span class="no">n</span><span class="pi">.</span><span class="w">
  </span><span class="kp">simpl</span><span class="pi">.</span><span class="w"> </span><span class="c">(* Does nothing! *)</span><span class="w">
</span><span class="no">Abort</span><span class="pi">.</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

:ET