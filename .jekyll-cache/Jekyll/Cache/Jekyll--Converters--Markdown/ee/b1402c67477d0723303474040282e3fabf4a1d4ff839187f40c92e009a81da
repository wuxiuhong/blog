I"J<ul>
  <li>内存分配：内存模型</li>
  <li>生命周期：内存的生命周期、内存泄漏、内存常驻</li>
  <li>垃圾回收：垃圾回收机制</li>
</ul>

<h2 id="内存模型">内存模型</h2>

<ul>
  <li>堆：引入数据类型: Object, Array</li>
  <li>栈：基本数据类型：undefined、null、boolean、number、 string</li>
  <li>池：常量:const</li>
</ul>

<blockquote>
  <p>连续性内存，存在栈顶和栈底</p>
</blockquote>

<p>堆栈： 进栈、出栈，先进后出、后进先出<br />
引用类型, 新建对象存在内存，是个内存地址。</p>

<h6 id="队列-先进先出">队列 先进先出</h6>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
<span class="c1">// 队列 先进先出</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span> <span class="c1">// [3, 2]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h6 id="堆栈">堆栈</h6>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
<span class="nx">arr2</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">arr2</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="nx">arr2</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
<span class="nx">arr2</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr2</span><span class="p">);</span> <span class="c1">// [1, 2]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h6 id="基本类型">基本类型</h6>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span>
<span class="nx">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// 10</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h6 id="引用类型">引用类型</h6>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">aa</span><span class="p">:</span><span class="mi">20</span><span class="p">,</span> <span class="na">bb</span><span class="p">:</span><span class="mi">30</span><span class="p">};</span>
<span class="kd">let</span> <span class="nx">obk</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>
<span class="nx">obk</span><span class="p">.</span><span class="nx">aa</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">aa</span><span class="p">);</span> <span class="c1">// 10</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="内存的生命周期内存泄漏内存常驻">内存的生命周期、内存泄漏、内存常驻</h2>

<h6 id="1-内存泄漏-无声明">1 内存泄漏, 无声明</h6>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="c1">// 内存泄漏</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="c1">// 无声明就是全局变量, 相对于window.demo，导致内存泄漏</span>
 <span class="nx">demo</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">测试</span><span class="dl">"</span><span class="p">;</span>
 <span class="c1">// let demo = "测试";</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">();</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<h6 id="指向全局window导致内存泄漏">指向全局window，导致内存泄漏</h6>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">fn2</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// 指向全局window，导致内存泄漏</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">demo2</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">fn2</span><span class="p">();</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="垃圾回收机制">垃圾回收机制</h2>

<p>垃圾回收算法主要依赖于引用的概念。<br />
在内存管理的环境中，一个对象如果有访问另一个对象的权限（隐式或者显式），叫一个对象引用另一个对象。“对象” 的概念不仅特指javascript对象，还包括函数作用域（或者全局词法作用域）</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre> <span class="c1">// 垃圾回收机制</span>
  <span class="kd">let</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">a</span><span class="p">:</span> <span class="p">{</span>
       <span class="na">b</span><span class="p">:</span> <span class="mi">2</span>
    <span class="p">}</span> 
  <span class="p">}</span>
  <span class="c1">// 以上o没有回收，引用操作</span>
  <span class="kd">let</span> <span class="nx">o2</span> <span class="o">=</span> <span class="nx">o</span><span class="p">;</span> <span class="c1">// o2引用了o</span>
  <span class="c1">// o是一个零引用状态</span>
  <span class="nx">o</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="c1">// 没有被回收，因为属性a还在被调用</span>
  <span class="kd">let</span> <span class="nx">oa</span> <span class="o">=</span> <span class="nx">o2</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">);</span> <span class="c1">// 1</span>
  <span class="nx">o2</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">wendy</span><span class="dl">'</span><span class="p">;</span>
  <span class="c1">// 进行手动主动回收</span>
  <span class="nx">oa</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// 释放内存</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h6 id="1-引用计数垃圾收集">1 引用计数垃圾收集</h6>
<p>初级的垃圾收集算法，对象是否不再需要即对象有没有其他对象引用到它，如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。<br />
缺点：循环引用不会被回收</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre>  <span class="c1">// 引用计数垃圾收集</span>
  <span class="kd">function</span> <span class="nx">fn3</span><span class="p">(){</span>
    <span class="kd">let</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="kd">let</span> <span class="nx">o2</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="c1">// 循环引用，没被释放</span>
    <span class="c1">// 相互引用，不会被回收</span>
    <span class="nx">o</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">o2</span><span class="p">;</span>
    <span class="nx">o2</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">o</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">fn3</span><span class="p">();</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h6 id="2-标记--清除算法">2 标记 － 清除算法</h6>
<p>设置一个叫做根（root）的对象（在javascript里，根是全局变量）。垃圾回收器将定期从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象…从根开始，垃圾回收器将找到所有可以获得的对象和收集所有不能获得的对象<br />
缺点： 无法从根对象查询到的对象都将被清除（可被忽略）</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
</pre></td><td class="rouge-code"><pre><span class="c1">// &lt;p id="domP"&gt;&lt;p&gt;  &lt;button id="btn"&gt;移除p节点&lt;button&gt;</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">domP</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">domP</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">timeInerval</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(()</span><span class="o">=&gt;</span><span class="p">{</span>
    <span class="kd">let</span> <span class="nx">time</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">domP</span><span class="p">){</span>
      <span class="nx">domP</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">time</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>

  <span class="kd">let</span> <span class="nx">btn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">btn</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">btn</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 显示的移除</span>
    <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">timeInerval</span><span class="p">);</span>
    <span class="nx">domP</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="c1">// 闭包，作用域。全局访问不了局部，通过闭包return</span>
  <span class="c1">// 闭包不能保持太多变量，会导致内存溢出。需要及时对闭包变量进行回收</span>
  <span class="kd">function</span> <span class="nx">findGf</span><span class="p">(){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">名字</span><span class="dl">'</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="kd">let</span> <span class="o">=</span> <span class="mi">160</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">findGf</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">selectName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="c1">// 这里会存在大量的变量</span>
    <span class="c1">// let _this = this;</span>
    <span class="c1">// 单独处理，并回收</span>
    <span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
    <span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
      <span class="k">return</span> <span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// 进行回收</span>
    <span class="nx">name</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">let</span> <span class="nx">gf</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">findGf</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">gf</span><span class="p">.</span><span class="nx">selectName</span><span class="p">()());</span>
  <span class="c1">// node</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">memoryUsage</span><span class="p">());</span>

  <span class="c1">// 垃圾回收机制</span>
  <span class="kd">let</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">a</span><span class="p">:</span> <span class="p">{</span>
       <span class="na">b</span><span class="p">:</span> <span class="mi">2</span>
    <span class="p">}</span> 
  <span class="p">}</span>
  <span class="c1">// 以上o没有回收，引用操作</span>
  <span class="kd">let</span> <span class="nx">o2</span> <span class="o">=</span> <span class="nx">o</span><span class="p">;</span> <span class="c1">// o2引用了o</span>
  <span class="c1">// o是一个零引用状态</span>
  <span class="nx">o</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="c1">// 没有被回收，因为属性a还在被调用</span>
  <span class="kd">let</span> <span class="nx">oa</span> <span class="o">=</span> <span class="nx">o2</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">);</span> <span class="c1">// 1</span>
  <span class="nx">o2</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">wendy</span><span class="dl">'</span><span class="p">;</span>
  <span class="c1">// 进行手动主动回收</span>
  <span class="nx">oa</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// 释放内存</span>

  <span class="c1">// 引用计数垃圾收集</span>
  <span class="kd">function</span> <span class="nx">fn3</span><span class="p">(){</span>
    <span class="kd">let</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="kd">let</span> <span class="nx">o2</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="c1">// 循环引用，没被释放</span>
    <span class="c1">// 相互引用，不会被回收</span>
    <span class="nx">o</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">o2</span><span class="p">;</span>
    <span class="nx">o2</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">o</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">fn3</span><span class="p">();</span>

<span class="p">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>温馨提示：少定义全局变量，定时器要及时清除、对一些全局变量（常驻内存）及时释放。</p>
</blockquote>
:ET