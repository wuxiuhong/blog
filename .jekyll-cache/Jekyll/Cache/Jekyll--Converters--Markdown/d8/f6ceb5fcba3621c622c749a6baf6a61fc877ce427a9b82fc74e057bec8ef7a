I"`<ul>
  <li>JavaScript的执行机制 － eventloop</li>
  <li>作用域链与引用类型</li>
  <li>V8引擎内存问题</li>
</ul>

<h2 id="javascript的执行机制--eventloop">JavaScript的执行机制 － eventloop</h2>

<p>执行顺序：</p>

<p>开始执行  ＝&gt; 逐步执行代码  =&gt; 有代码异步操作 ＝&gt;  异步操作插入到异步队列 =&gt; 全部执行完毕 
=&gt; 询问是否有异步 =&gt; 异步队列 =&gt; 异步任务的回调回到主任务执行</p>

<p>异步队列里包含微任务和宏任务</p>
<ul>
  <li>宿主环境（常见的两种宿主环境有浏览器和node）提供的叫宏任务，由语言标准（比如ES6提供的promise）提供的叫微任务</li>
  <li>微任务：Promise, process.nextTick</li>
  <li>宏任务：整体代码script、setTimeout、setInterval</li>
  <li>async本身不是异步操作， await是等待，后面的代码都不执行，await从使用上来说，必须等待一个promise</li>
</ul>

<p>学习微宏任务，异步</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre><span class="c1">// 一、学习微宏任务，异步</span>
<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">set1</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">){</span>
    <span class="nx">resolve</span><span class="p">();</span>
  <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">then3</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="c1">// 微任务</span>
<span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">pr1</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">resolve</span><span class="p">();</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">then1</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// 宏任务</span>
<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">set2</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// 微任务</span>
<span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">){</span>
  <span class="nx">resolve</span><span class="p">();</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">then2</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>

<span class="c1">// 执行结果 pr1 3 then1 then2 set1 then3 set2</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>学习async、异步</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>微任务会先于宏任务； 微任务队列空了，才会执行下一个宏任务，异步队列执行的时候，只要有微任务，都优先执行微任务</p>

<h2 id="作用域链与引用类型">作用域链与引用类型</h2>

<p>对象、数组是引用类型， 参数在方法内，相当于是个局部变量</p>

<p>js查找变量会从当前作用域逐级向上查找，直到window，如果window没有，则为undefined</p>

<p>扩展：Javascript的数组并不是数据结构意义上的数组，为什么？
1 数据结构意义上的数组是，连续想等内存变量。必须规定大小、类型
2 真的数组是不可以扩容的
数据结构上，扩容一个数组，内存做了什么？
javascript随便扩容，删减
学知识 =&gt; 面 =&gt; 点</p>
:ET